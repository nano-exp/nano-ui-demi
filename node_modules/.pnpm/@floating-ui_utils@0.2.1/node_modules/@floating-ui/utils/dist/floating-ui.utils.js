const e = Math.min, i = Math.max, h = Math.round, s = Math.floor, x = (t) => ({
  x: t,
  y: t
});
function g(t, n, o) {
  return i(t, e(n, o));
}
function m(t, n) {
  return typeof t == "function" ? t(n) : t;
}
function r(t) {
  return t.split("-")[0];
}
function l(t) {
  return t.split("-")[1];
}
function u(t) {
  return t === "x" ? "y" : "x";
}
function p(t) {
  return t === "y" ? "height" : "width";
}
function f(t) {
  return ["top", "bottom"].includes(r(t)) ? "y" : "x";
}
function y(t) {
  return u(f(t));
}
function c(t) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...t
  };
}
function b(t) {
  return typeof t != "number" ? c(t) : {
    top: t,
    right: t,
    bottom: t,
    left: t
  };
}
function a(t) {
  return {
    ...t,
    top: t.y,
    left: t.x,
    right: t.x + t.width,
    bottom: t.y + t.height
  };
}
export {
  g as clamp,
  x as createCoords,
  m as evaluate,
  c as expandPaddingObject,
  s as floor,
  l as getAlignment,
  y as getAlignmentAxis,
  p as getAxisLength,
  u as getOppositeAxis,
  b as getPaddingObject,
  r as getSide,
  f as getSideAxis,
  i as max,
  e as min,
  a as rectToClientRect,
  h as round
};
